# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  rouler_pour_aider-strapi:
    container_name: ${APP_NAME}-strapi
    build:
      context: .
      target: ${APP_ENV}
      args:
        NODE_ENV: ${NODE_ENV}
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./config:/usr/src/app/config
      - ./src:/usr/src/app/src
      - ./package.json:/usr/src/app/package.json
      - ./yarn.lock:/usr/src/app/yarn.lock
      - ./public/uploads:/usr/src/app/public/uploads
    ports:
      - 1337:1337
    networks:
      - strapi
      # - traefik
    depends_on:
      - rouler_pour_aider-strapi_db

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
  rouler_pour_aider-strapi_db:
    image: postgres
    restart: always
    user: postgres
    # secrets:
    #   - db-password
    # volumes:
    #   - db-data:/var/lib/postgresql/data
    environment:
      # - POSTGRES_USER=/run/secrets/
      # - POSTGRES_PASSWORD=/run/secrets/
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
      # - POSTGRES_DB=example
      # - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    # expose:
    #   - 5432
    networks:
      - strapi
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  strapi:
    name: Strapi
    driver: bridge
  # traefik:
  #     name: traefik
  #     external: true

# volumes:
#   db-data:
# secrets:
#   db-strapi:
#     file: .secrets/database_password.txt
    # external: true

